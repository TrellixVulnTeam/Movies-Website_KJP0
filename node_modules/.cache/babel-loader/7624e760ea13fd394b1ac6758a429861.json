{"ast":null,"code":"var _jsxFileName = \"D:\\\\MovieApp\\\\src\\\\Components\\\\details\\\\index.jsx\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport Preloader from '../preloader.jsx';\nimport NotFound from '../404';\nimport Header from './header';\nimport Videos from './videos';\nimport Crews from './actors';\nimport { getDetails, getVideos, getCredits } from '../../Services/apicontroller';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction Details() {\n  _s();\n\n  const {\n    movie_id\n  } = useParams();\n  const [isloading, setIsloading] = useState(true);\n  const [hasError, setHasError] = useState(false);\n  const [mediainfo, setMediainfo] = useState({});\n  const [video, setVideo] = useState([{}]);\n  const [crew, setCrew] = useState([{}]);\n  useEffect(() => {\n    async function load() {\n      const response = await getDetails(movie_id);\n\n      if (response.ok) {\n        const details = await response.json();\n        setMediainfo(details);\n        getVideos(movie_id).then(results => setVideo(results));\n        const credits = await getCredits(movie_id);\n\n        if (credits.ok) {\n          const creditsDetails = await credits.json();\n          setCrew(creditsDetails);\n        }\n\n        setIsloading(false);\n      } else {\n        setHasError(true);\n      }\n    }\n\n    if (isloading) {\n      load();\n    }\n  }, [movie_id, isloading]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: hasError ? /*#__PURE__*/_jsxDEV(NotFound, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 24\n    }, this) : isloading ? /*#__PURE__*/_jsxDEV(Preloader, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 25\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Header, { ...mediainfo\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Crews, {\n        cast: crew.cast\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Videos, {\n        videos: video.results\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 41\n    }, this)\n  }, void 0, false);\n}\n\n_s(Details, \"50f5GCF0tPYpDUQGtCCBdS/jt1A=\", false, function () {\n  return [useParams];\n});\n\n_c = Details;\nexport default Details;\n\nvar _c;\n\n$RefreshReg$(_c, \"Details\");","map":{"version":3,"sources":["D:/MovieApp/src/Components/details/index.jsx"],"names":["useState","useEffect","useParams","Preloader","NotFound","Header","Videos","Crews","getDetails","getVideos","getCredits","Details","movie_id","isloading","setIsloading","hasError","setHasError","mediainfo","setMediainfo","video","setVideo","crew","setCrew","load","response","ok","details","json","then","results","credits","creditsDetails","cast"],"mappings":";;;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,SAASC,SAAT,QAA0B,kBAA1B;AACA,OAAOC,SAAP,MAAsB,kBAAtB;AACA,OAAOC,QAAP,MAAqB,QAArB;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAOC,KAAP,MAAkB,UAAlB;AACA,SAASC,UAAT,EAAqBC,SAArB,EAAgCC,UAAhC,QAAkD,8BAAlD;;;;AAGA,SAASC,OAAT,GAAmB;AAAA;;AACf,QAAM;AAAEC,IAAAA;AAAF,MAAeV,SAAS,EAA9B;AACA,QAAM,CAACW,SAAD,EAAYC,YAAZ,IAA4Bd,QAAQ,CAAC,IAAD,CAA1C;AACA,QAAM,CAACe,QAAD,EAAWC,WAAX,IAA0BhB,QAAQ,CAAC,KAAD,CAAxC;AACA,QAAM,CAACiB,SAAD,EAAYC,YAAZ,IAA4BlB,QAAQ,CAAC,EAAD,CAA1C;AACA,QAAM,CAACmB,KAAD,EAAQC,QAAR,IAAoBpB,QAAQ,CAAC,CAAC,EAAD,CAAD,CAAlC;AACA,QAAM,CAACqB,IAAD,EAAOC,OAAP,IAAkBtB,QAAQ,CAAC,CAAC,EAAD,CAAD,CAAhC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACZ,mBAAesB,IAAf,GAAsB;AAClB,YAAMC,QAAQ,GAAG,MAAMhB,UAAU,CAACI,QAAD,CAAjC;;AACA,UAAIY,QAAQ,CAACC,EAAb,EAAiB;AACb,cAAMC,OAAO,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAAtB;AACAT,QAAAA,YAAY,CAACQ,OAAD,CAAZ;AAEAjB,QAAAA,SAAS,CAACG,QAAD,CAAT,CAAoBgB,IAApB,CACIC,OAAO,IAAIT,QAAQ,CAACS,OAAD,CADvB;AAGA,cAAMC,OAAO,GAAG,MAAMpB,UAAU,CAACE,QAAD,CAAhC;;AACA,YAAIkB,OAAO,CAACL,EAAZ,EAAgB;AACZ,gBAAMM,cAAc,GAAG,MAAMD,OAAO,CAACH,IAAR,EAA7B;AACAL,UAAAA,OAAO,CAACS,cAAD,CAAP;AACH;;AACDjB,QAAAA,YAAY,CAAC,KAAD,CAAZ;AACH,OAbD,MAcK;AACDE,QAAAA,WAAW,CAAC,IAAD,CAAX;AACH;AACJ;;AACD,QAAIH,SAAJ,EAAe;AACXU,MAAAA,IAAI;AACP;AACJ,GAxBQ,EAwBN,CAACX,QAAD,EAAUC,SAAV,CAxBM,CAAT;AAyBA,sBAAQ;AAAA,cACAE,QAAQ,gBAAG,QAAC,QAAD;AAAA;AAAA;AAAA;AAAA,YAAH,GACRF,SAAS,gBAAG,QAAC,SAAD;AAAA;AAAA;AAAA;AAAA,YAAH,gBAAmB;AAAA,8BAC5B,QAAC,MAAD,OAAYI;AAAZ;AAAA;AAAA;AAAA;AAAA,cAD4B,eAE5B,QAAC,KAAD;AAAO,QAAA,IAAI,EAAEI,IAAI,CAACW;AAAlB;AAAA;AAAA;AAAA;AAAA,cAF4B,eAG5B,QAAC,MAAD;AAAQ,QAAA,MAAM,EAAEb,KAAK,CAACU;AAAtB;AAAA;AAAA;AAAA;AAAA,cAH4B;AAAA;AAAA;AAAA;AAAA;AAAA;AAF5B,mBAAR;AAQH;;GAzCQlB,O;UACgBT,S;;;KADhBS,O;AA0CT,eAAeA,OAAf","sourcesContent":["import { useState, useEffect } from 'react';\r\nimport { useParams } from 'react-router-dom'\r\nimport Preloader from '../preloader.jsx'\r\nimport NotFound from '../404'\r\nimport Header from './header';\r\nimport Videos from './videos'\r\nimport Crews from './actors'\r\nimport { getDetails, getVideos, getCredits } from '../../Services/apicontroller'\r\n\r\n\r\nfunction Details() {\r\n    const { movie_id } = useParams()\r\n    const [isloading, setIsloading] = useState(true)\r\n    const [hasError, setHasError] = useState(false)\r\n    const [mediainfo, setMediainfo] = useState({})\r\n    const [video, setVideo] = useState([{}])\r\n    const [crew, setCrew] = useState([{}])\r\n\r\n    useEffect(() => {\r\n        async function load() {\r\n            const response = await getDetails(movie_id)\r\n            if (response.ok) {\r\n                const details = await response.json()\r\n                setMediainfo(details)\r\n\r\n                getVideos(movie_id).then(\r\n                    results => setVideo(results)\r\n                )\r\n                const credits = await getCredits(movie_id)\r\n                if (credits.ok) {\r\n                    const creditsDetails = await credits.json()\r\n                    setCrew(creditsDetails)\r\n                }\r\n                setIsloading(false)\r\n            }\r\n            else {\r\n                setHasError(true)\r\n            }\r\n        }\r\n        if (isloading) {\r\n            load()\r\n        }\r\n    }, [movie_id,isloading])\r\n    return (<>{\r\n            hasError ? <NotFound/>: \r\n            isloading ? <Preloader /> : <div>\r\n            <Header {...mediainfo} />\r\n            <Crews cast={crew.cast} />\r\n            <Videos videos={video.results} />\r\n        </div>\r\n    }</>)\r\n}\r\nexport default Details;"]},"metadata":{},"sourceType":"module"}